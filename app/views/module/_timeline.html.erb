<link rel="stylesheet" type="text/css" href="css/VerticalTimeline/component.css"/>
<script src="js/modernizr.custom.js"></script>



<style>
    #timeline_a {
        position: static;
        color: #ffffff;
    }

    #timeline_a.hover {
        position: static;

        color: #ffffff;
    }
</style>

<header class="clearfix">
  <h1>新闻部落</h1>
</header>
<div class="main">
  <ul class="cbp_tmtimeline">

    <% issues.each do |issue| %>
        <li>
          <time class="cbp_tmtime" datetime=""><span><%= issue.created_at.strftime("%r") %></span>
            <span><%= issue.created_at.strftime("%F") %></span></time>
          <div class="cbp_tmicon cbp_tmicon-phone"></div>
          <div class="cbp_tmlabel">
            <a href="<%= shownews_url(issue) %>" id="timeline_a"><h2><%= issue.title %></h2></a>

            <a href="<%= shownews_url(issue) %>" id="timeline_a"><p><%= truncate(issue.content, :length => 400) %></p>
            </a>
          </div>
        </li>
    <% end %>
  </ul>
</div>




<script src="js/masonry.pkgd.min.js"></script>



<script>
    $(function () {

        var masonryNode = $('#masonry');
        masonryNode.imagesLoaded(function () {
            masonryNode.masonry({
                itemSelector: '.thumbnail',
                isFitWidth: true
            });
        });


        // 首先将新元素添加到页面容器中

        masonryNode.append(newItems);
// 等待新元素中的图片加载完毕
        newItems.imagesLoaded(function () {

// 调用瀑布流布局的appended方法
            masonryNode.masonry('appended', newItems);
        });

    });

    var ghostNode = $('#masonry_ghost').find('.thumbnail'), i, ghostIndexArray = [];
    var ghostCount = ghostNode.length;
    for (i = 0; i < ghostCount; i++) {
        ghostIndexArray[i] = i;
    }
    ghostIndexArray.sort(function (a, b) {
        if (Math.random() > 0.5) {
            return a - b;
        } else {
            return b - a;
        }
    });


    var nextDataNumber = 5;
    var ajaxLoading = false;
    var docNode = $(document);

    var ulNode = $('ul.timeline');

    function initLiNodes() {
        var liNodes = ulNode.find('li'), count = liNodes.length, i, liNode, leftCount = nextDataNumber * 2;
        for (i = 0; i < count; i++) {
            liNode = $(liNodes.get(i));
            if (i % 2 !== 0) {
                liNode.addClass('alt');
            } else {
                liNode.removeClass('alt');
            }
            liNode.find('.number').text(leftCount + count - i);
        }
    }


    $('#fetchNextData').click(function () {
        var $this = $(this);
        $this.addClass('disabled').text('正在加载后二十条数据...');
        ajaxLoading = true;

        $.get('./version_data_' + nextDataNumber + '.txt', function (data) {
            ajaxLoading = false;
            ulNode.append(data);
            $this.removeClass('disabled').text('后二十条数据');
            nextDataNumber--;

            if (nextDataNumber === 0) {
                $this.hide();
            }

            initLiNodes();
        });

    });

    initLiNodes();

    $(window).scroll(function() {

        if($(document).height() - $(window).height() - $(document).scrollTop() < 2) {

            if(!imagesLoading) {
                appendToMasonry();
            }

        }

    });
</script>